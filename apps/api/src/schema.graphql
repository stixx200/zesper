type Query {
  users: [User!]!
  user(query: UserQuery!): User!
  menus: [Menu!]!
  foods: [Food]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  createMenu(name: String!, foodIds: [FoodLink!]!): Menu!
  updateMenu(menuId: ID!, foodIds: [FoodLink!], name: String): Menu!
  deleteMenu(id: ID!): Menu!
  createFood(name: String!, price: Float!): Food!
  updateFood(foodId: ID!, name: String, price: Float): Food!
  deleteFood(id: ID!): Food!
}

type User {
  id: ID!
  email: String!
  name: String!
  isAdmin: Boolean!
}

input UserQuery {
  id: ID
  email: String
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Menu {
  id: ID!
  name: String!
  items: [Food!]!
}

type Food {
  id: ID!
  name: String!
  price: Float!
}

input FoodLink {
  id: ID!
}
